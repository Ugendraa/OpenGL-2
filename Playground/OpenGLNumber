#include<iostream>
#include<string.h>
#include<GL/glut.h>
using namespace std;

int itoa(int n, char s[])
{
    int i, sign,len;

    if ((sign = n) < 0)  /* record sign */
        n = -n;          /* make n positive */
    i = 0;
    do {       /* generate digits in reverse order */
        s[i++] = n % 10 + '0';   /* get next digit */
    } while ((n /= 10) > 0);     /* delete it */
	len=strlen(s);
    if (sign < 0)
        s[i++] = '-';
    s[i] = '\0';
    strrev(s);
	return len;
}

void print_num(char s[], int x=0, int y=0 , GLfloat xscale=1, GLfloat yscale=1, GLfloat zscale=1)
{
     glPushMatrix();
     glScalef(xscale,yscale,zscale);
     glTranslatef(x,y,0);
     for(int i=0;s[i]!='\0';i++)
     {
             
             glutStrokeCharacter(/*GLUT_STROKE_ROMAN*/GLUT_STROKE_MONO_ROMAN, s[i]);
             x+=glutStrokeWidth(GLUT_STROKE_MONO_ROMAN, s[i]);
             glTranslatef(x,y,0);
     }
}
void print_num(char s[], GLfloat scale, int x=0, int y=0 )
{
     GLfloat xscale,yscale;
     xscale=yscale=scale;
     GLfloat zscale=1;
     glPushMatrix();
     glScalef(xscale,yscale,zscale);
     glTranslatef(x,y,0);
     for(int i=0;s[i]!='\0';i++)
     {
             
             glutStrokeCharacter(/*GLUT_STROKE_ROMAN*/GLUT_STROKE_MONO_ROMAN, s[i]);
            // x+=glutStrokeWidth(GLUT_STROKE_MONO_ROMAN, s[i]);
            // glTranslatef(x,y,0);
     }
     glPopMatrix();
}                         
void myinit()
{
     glClearColor(0.0,0.0,0.0,0.0);
     glMatrixMode(GL_PROJECTION);
     glLoadIdentity();
     gluOrtho2D(0.0,250.0,0.0,250.0);
     glMatrixMode(GL_MODELVIEW);
}





     

void display()
{
     //glScalef(.5,.5,1);
     //glutStrokeCharacter(/*GLUT_STROKE_ROMAN*/GLUT_STROKE_MONO_ROMAN, 'C');
     
     int num=100;
     char s[10];
     itoa(num,s);
     print_num(s,.1f);
     
     glFlush();
}

int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB /*| GLUT_DEPTH*/);
    glutInitWindowSize(800, 800);
    glutCreateWindow("Stack");
    //glutReshapeFunc(myReshape);
    //glutSpecialFunc(keyControl);
    //glutIdleFunc(idler);
    glutDisplayFunc(display);
    myinit();
    glutMainLoop();
    
    return 0;
}
